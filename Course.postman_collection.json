{
	"info": {
		"_postman_id": "66cdde3e-6a25-45e4-b93b-c29493afca81",
		"name": "Course",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9031685"
	},
	"item": [
		{
			"name": "Happy Path",
			"item": [
				{
					"name": "grocery status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/status",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "all product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"const res=pm.response.json();\r",
									"\r",
									"pm.test(\"Verify that atleast one product is available\",()=>{\r",
									"\r",
									"    pm.expect(res).to.be.an('array');\r",
									"    pm.expect(res[0]).to.be.an('object');\r",
									"    pm.expect(res[0]).to.haveOwnProperty('id');\r",
									"    pm.expect(res[0].id).to.be.a('number');\r",
									"    pm.expect(res[0]).to.haveOwnProperty('inStock');\r",
									"    pm.expect(res[0].inStock).to.be.true;\r",
									"\r",
									"    let productid=res[0].id;\r",
									"    pm.collectionVariables.set(\"productId\",productid);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/products?category=candy",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "candy"
								},
								{
									"key": "results",
									"value": "1ref",
									"disabled": true
								},
								{
									"key": "available",
									"value": "true",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "a product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"let getId=pm.collectionVariables.get('productId');\r",
									"//getId=parseInt(getId);\r",
									"const res=pm.response.json();\r",
									"pm.test(\"Check we are getting proper Product in response\",()=>{\r",
									" pm.expect(res.id).to.eql(getId);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/products/:productId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products",
								":productId"
							],
							"variable": [
								{
									"key": "productId",
									"value": "{{productId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"const res=pm.response.json();\r",
									"\r",
									"pm.test(\"Cart is created successfully\",()=>{\r",
									"    pm.expect(res).to.be.an('object');\r",
									"    pm.expect(res).to.haveOwnProperty('created');\r",
									"    pm.expect(res.created).to.be.true;\r",
									"    pm.expect(res).to.haveOwnProperty('cartId');\r",
									"    pm.expect(res.cartId).to.be.a('string');\r",
									"\r",
									"    const cartid=res.cartId;\r",
									"    pm.collectionVariables.set(\"cartId\",cartid);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/carts",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "get a cart detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/carts/:cartId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"carts",
								":cartId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "add item to cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"get item id via adding an item to cart\",()=>{\r",
									"    const res=pm.response.json();\r",
									"    pm.expect(res).to.be.an('object');\r",
									"    pm.expect(res.created).to.be.true;\r",
									"    pm.expect(res).to.haveOwnProperty('itemId');\r",
									"    pm.expect(res.itemId).to.be.a('number');\r",
									"\r",
									"    const lastAddedItemId=res.itemId;\r",
									"    pm.collectionVariables.set(\"lastAddedItemId\",lastAddedItemId);\r",
									"\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"productId\":{{productId}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/carts/:cartId/items",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"carts",
								":cartId",
								"items"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get a cart item",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/carts/:cartId/items",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"carts",
								":cartId",
								"items"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "modify quantity item to cart",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandom(maxValue){\r",
									"    return Math.floor(Math.random()*maxValue);\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set('randomQuantity',getRandom(2));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"quantity\":{{randomQuantity}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/carts/:cartId/items/:itemId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"carts",
								":cartId",
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								},
								{
									"key": "itemId",
									"value": "{{lastAddedItemId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "modify complete item to cart",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"productId\":4643,\r\n    \"quantity\":2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/carts/:cartId/items/:itemId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"carts",
								":cartId",
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								},
								{
									"key": "itemId",
									"value": "{{lastAddedItemId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"order is created successfully\",()=>{\r",
									"    const res=pm.response.json();\r",
									"    pm.expect(res).to.be.an('object');\r",
									"    pm.expect(res).to.haveOwnProperty('created');\r",
									"    pm.expect(res.created).to.be.true;\r",
									"    pm.expect(res).to.haveOwnProperty('orderId');\r",
									"    pm.expect(res.orderId).to.be.a('string');\r",
									"\r",
									"    const orderedProductOrderId=res.orderId;\r",
									"    pm.collectionVariables.set(\"orderedProductOrderId\",orderedProductOrderId);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{Token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "e3a75e014f6249599af448e5ed8bca375382c36833bf492e6d7634cb5e729a4b",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cartId\": \"{{cartId}}\",\r\n    \"customerName\": \"{{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/orders",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const res=pm.response.json();\r",
									"\r",
									"pm.test(\"Verify the last order is present in orders\",()=>{\r",
									"    pm.expect(res).to.be.an('array');\r",
									"    let isLastOrderIsfound =false;\r",
									"\r",
									"    if(res && !(res.error)){\r",
									"      /*  for (let i=0;i<res.length;i++){\r",
									"            pm.expect(res[i]).to.haveOwnProperty('id');\r",
									"\r",
									"            let getidOfEachOrder=res[i].id;\r",
									"            let lastorderId=pm.collectionVariables.get('orderedProductOrderId');\r",
									"            if(getidOfEachOrder ===lastorderId){\r",
									"                console.log(\"yes Verified\");       \r",
									"                 isLastOrderIsfound=true;\r",
									"            }\r",
									"        }*/\r",
									"\r",
									"        /* res.forEach((order)=>{\r",
									"            let getidOfEachOrder=order.id;\r",
									"            let lastorderId=pm.collectionVariables.get('orderedProductOrderId');\r",
									"            if(getidOfEachOrder ===lastorderId){\r",
									"                console.log(\"yes Verified\");       \r",
									"                isLastOrderIsfound=true;\r",
									"            }\r",
									"\r",
									"         });   */\r",
									"\r",
									"        let lastorderId=pm.collectionVariables.get('orderedProductOrderId');\r",
									"        let foundOrder=res.find((order)=>order.id===lastorderId);\r",
									"        pm.expect(foundOrder).to.be.an('object');\r",
									"\r",
									"        if (foundOrder) {isLastOrderIsfound=true;}\r",
									"\r",
									"   }\r",
									"   else \r",
									"        console.log(\"no\");\r",
									"\r",
									"    pm.expect(isLastOrderIsfound).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/orders",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "update an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"customerName\": \"Joe Doe\",\r\n \"comment\":\"pickup\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/orders/:orderId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderedProductOrderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Order",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cartId\": \"MZgaQK9TX4mqkvdsBi6W3\",\r\n    \"customerName\": \"{{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/orders/:orderId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderedProductOrderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get single Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"check the order which we deleted not present\",()=>{\r",
									"    const res=pm.response.json();\r",
									"    pm.expect(res).to.be.an('object');\r",
									"    pm.expect(res).to.haveOwnProperty('error');\r",
									"    pm.expect(res.error).to.be.a('string');\r",
									"    pm.expect(res.error).to.have.string(pm.collectionVariables.get('orderedProductOrderId'));\r",
									"\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/orders/:orderId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderedProductOrderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "delete item to cart",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/carts/:cartId/items/:itemId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"carts",
								":cartId",
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								},
								{
									"key": "itemId",
									"value": "{{lastAddedItemId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Api client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"clientName\": \"Postman on ansh's computer\",\r\n   \"clientEmail\": \"ansh@g.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api-clients",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api-clients"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Missing Authentication",
			"item": [
				{
					"name": "Missing header",
					"item": [
						{
							"name": "get all Order - Missing Auth",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/orders",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a Order - Missing Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Missing auth\",()=>{\r",
											"   pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Message Error\",()=>{\r",
											" const res=pm.response.json();\r",
											"\r",
											" pm.expect(res.error).to.eql(\"Missing Authorization header.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cartId\": \"{{cartId}}\",\r\n    \"customerName\": \"{{$randomFullName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/orders",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Missing auth header Error\",()=>{",
									" const res=pm.response.json();",
									"",
									" pm.expect(res.error).to.eql(\"Missing Authorization header.\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Invalid Token",
					"item": [
						{
							"name": "Create a Order - Invalid Token",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer eete",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cartId\": \"{{cartId}}\",\r\n    \"customerName\": \"{{$randomFullName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/orders",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "get all Order - Invalid Token",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "beret",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/orders",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"pm.test(\"Invalid Token Message Error\",()=>{",
									" const res=pm.response.json();",
									"",
									" pm.expect(res.error).to.eql(\"Invalid bearer token.\");",
									"});"
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status Missing auth\",()=>{",
							"   pm.response.to.have.status(401);",
							"});",
							""
						]
					}
				}
			]
		},
		{
			"name": "Invalid Input",
			"item": [
				{
					"name": "Get all products - Invalid category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error Message\",()=>{\r",
									" const res=pm.response.json();\r",
									" pm.expect(res.error).to.have.string(\"Invalid value for query parameter 'category'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/products?category=coffeehyu",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "coffeehyu"
								},
								{
									"key": "results",
									"value": "1ref",
									"disabled": true
								},
								{
									"key": "available",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all products - Invalid Results - Max",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error Message\",()=>{\r",
									" const res=pm.response.json();\r",
									" pm.expect(res.error).to.have.string(\"Invalid value for query parameter 'results'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/products?results=24",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "coffeehyu",
									"disabled": true
								},
								{
									"key": "results",
									"value": "24"
								},
								{
									"key": "available",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all products - Invalid Results - Min",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error Message\",()=>{\r",
									" const res=pm.response.json();\r",
									" const expectedError= \"Invalid value for query parameter 'results'\";\r",
									" pm.expect(res.error).to.have.string(expectedError);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/products?results=-1",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "coffeehyu",
									"disabled": true
								},
								{
									"key": "results",
									"value": "-1"
								},
								{
									"key": "available",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "This is a test that verify when we input values of results less than zero"
					},
					"response": []
				}
			],
			"description": "Verify the invalid inputs",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status is 400\",()=>{",
							"pm.response.to.have.status(400);",
							"});"
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{Token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "https://simple-grocery-store-api.glitch.me"
		},
		{
			"key": "Token",
			"value": "e3a75e014f6249599af448e5ed8bca375382c36833bf492e6d7634cb5e729a4b",
			"type": "string"
		},
		{
			"key": "cartId",
			"value": "BIx853XgSuW9Wy7wZi6vg",
			"type": "string"
		},
		{
			"key": "productId",
			"value": ""
		},
		{
			"key": "lastAddedItemId",
			"value": ""
		},
		{
			"key": "orderedProductOrderId",
			"value": ""
		},
		{
			"key": "randomQuantity",
			"value": ""
		}
	]
}